"""
Django settings for FeedbackSystem project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-g*!ot3-ak$#49bczb#c=pm#28%t-c0hn+33dhg!390j_s@1k5g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'feedback.apps.FeedbackConfig',
    
]

MIDDLEWARE = [
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'FeedbackSystem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'FeedbackSystem.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = 'display_content'

AUTHENTICATION_BACKENDS = [
    'feedback.backends.StudentNumberBackend',
    'django.contrib.auth.backends.ModelBackend',
]


"""
    In Django, `AUTHENTICATION_BACKENDS` is a setting that defines the authentication backends used to authenticate users. An authentication backend is responsible for determining whether a user is valid and can be authenticated.

In the`AUTHENTICATION_BACKENDS` setting above:

1. `'feedback.backends.StudentNumberBackend'`: 
This is a custom authentication backend that you have created, named `StudentNumberBackend`. 
It is listed first in the `AUTHENTICATION_BACKENDS` setting, 
which means it will be the first backend to be checked when a user tries to log in.
The `StudentNumberBackend` is responsible for authenticating users based on their student numbers.
When a user tries to log in, 
the backend will check the provided student number against the records in the database
and verify if the user exists and if the provided student number is correct.

2. `'django.contrib.auth.backends.ModelBackend'`:
This is the default authentication backend provided by Django, named `ModelBackend`. 
It is listed second in the `AUTHENTICATION_BACKENDS` setting, which means 
if the first backend (`StudentNumberBackend`) fails to authenticate the user, 
Django will fall back to the `ModelBackend`. The `ModelBackend` is responsible 
for authenticating users based on their credentials stored in the Django `User` model.

By configuring the `AUTHENTICATION_BACKENDS` setting this way, 
you are customizing the authentication process for your application. 
When a user tries to log in, Django will first try to authenticate 
the user using the `StudentNumberBackend`. If the student number is valid, 
the user will be logged in using your custom authentication mechanism. 
If the `StudentNumberBackend` fails to authenticate the 
user (e.g., the provided student number does not match any records), 
Django will then attempt to authenticate the user using the default `ModelBackend`.

This configuration allows me to implement a custom way of authenticating
users based on their student numbers while still retaining the option
to fall back to the default authentication mechanism provided by Django if needed.
"""